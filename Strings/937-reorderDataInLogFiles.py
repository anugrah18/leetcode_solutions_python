class Solution:
    def reorderLogFiles(self, logs):
        # Sort the logs using the custom key generated by self.get_key
        return sorted(logs, key=self.get_key)

    def get_key(self, log):
        # Split each log into two parts: the identifier (_id) and the rest of the log (rest)
        _id, rest = log.split(" ", maxsplit=1)

        # Check if the rest of the log starts with an alphabetic character
        if rest[0].isalpha():
            # If it does, return a tuple that prioritizes letter logs (0), then the content (rest), and then the identifier (_id)
            return (0, rest, _id)
        else:
            # If it doesn't (i.e., it's a digit log), return a tuple that ensures digit logs come after letter logs (1)
            return (1,)


# Example usage
X = Solution()
print(X.reorderLogFiles(["dig1 8 1 5 1", "let1 art can", "dig2 3 6", "let2 own kit dig", "let3 art zero"]))

# Time Complexity: O(MN log N), where N is the number of logs and M is the maximum length of a log.
# Space Complexity: O(MN), where N is the number of logs and M is the maximum length of a log.
